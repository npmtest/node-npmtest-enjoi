{"/home/travis/build/npmtest/node-npmtest-enjoi/test.js":"/* istanbul instrument in package npmtest_enjoi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-enjoi/lib.npmtest_enjoi.js":"/* istanbul instrument in package npmtest_enjoi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_enjoi = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_enjoi = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-enjoi/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-enjoi && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_enjoi */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_enjoi\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_enjoi.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_enjoi.rollup.js'] =\n            local.assetsDict['/assets.npmtest_enjoi.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_enjoi.__dirname + '/lib.npmtest_enjoi.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-enjoi/node_modules/enjoi/lib/enjoi.js":"'use strict';\n\nconst Assert = require('assert');\nconst Joi = require('joi');\nconst Thing = require('core-util-is');\nconst Alternatives = require('joi/lib/alternatives').constructor;\n\nmodule.exports = function enjoi(schema, options) {\n    options = options || {};\n\n    Assert.ok(Thing.isObject(schema) || Thing.isString(schema), 'Expected schema to be an object or type string.');\n    Assert.ok(Thing.isObject(options), 'Expected options to be an object.');\n\n    const subSchemas = options.subSchemas;\n    const types = options.types;\n\n    Assert.ok(!subSchemas || Thing.isObject(subSchemas), 'Expected options.subSchemas to be an object.');\n    Assert.ok(!types || Thing.isObject(types), 'Expected options.types to be an object.');\n\n    function resolve(current) {\n        if (current.type) {\n            return resolvetype(current);\n        }\n\n        if (current.anyOf) {\n            return resolveAnyOf(current);\n        }\n\n        if (current.allOf) {\n            return resolveAllOf(current);\n        }\n\n        if (current.oneOf) {\n            return resolveOneOf(current);\n        }\n\n        if (current.$ref) {\n            return resolve(resolveref(current.$ref));\n        }\n\n        //if no type is specified, just enum\n        if (current.enum) {\n            return Joi.any().valid(current.enum);\n        }\n\n        // If current is itself a string, interpret it as a type\n        if (typeof current === 'string') {\n            return resolvetype({ type: current });\n        }\n\n        //Fall through to whatever.\n        console.warn('WARNING: schema missing a \\'type\\' or \\'$ref\\' or \\'enum\\': %s', JSON.stringify(current));\n        return Joi.any();\n    }\n\n    function resolveref(value) {\n        let refschema;\n\n        const id = value.substr(0, value.indexOf('#') + 1);\n        const path = value.substr(value.indexOf('#') + 1);\n\n        if (id && subSchemas) {\n            refschema = subSchemas[id] || subSchemas[id.substr(0, id.length - 1)];\n        }\n        if (!refschema) {\n            refschema = schema;\n        }\n\n        Assert.ok(refschema, 'Can not find schema reference: ' + value + '.');\n\n        let fragment = refschema;\n        const paths = path.split('/');\n\n        for (let i = 1; i < paths.length && fragment; i++) {\n            fragment = typeof fragment === 'object' && fragment[paths[i]];\n        }\n\n        return fragment;\n    }\n\n    function resolvetype(current) {\n        let joischema;\n\n        const typeDefinitionMap = {\n            description: 'description',\n            title: 'label',\n            default: 'default'\n        };\n\n        function joitype(type) {\n            let joischema;\n            switch (type) {\n                case 'array':\n                    joischema = array(current);\n                    break;\n                case 'boolean':\n                    joischema = Joi.boolean();\n                    break;\n                case 'integer':\n                case 'number':\n                    joischema = number(current);\n                    break;\n                case 'object':\n                    joischema = object(current);\n                    break;\n                case 'string':\n                    joischema = string(current);\n                    break;\n                case 'null':\n                    joischema = Joi.any().valid(null);\n                    break;\n                default:\n                    if (types) {\n                        joischema = types[current.type];\n                    }\n            }\n            return joischema;\n        }\n\n        if (Thing.isArray(current.type)) {\n            const schemas = [];\n            for (let i = 0; i < current.type.length; i++) {\n                schemas.push(joitype(current.type[i]));\n            }\n            joischema = Joi.alternatives(schemas);\n        }\n        else {\n            joischema = joitype(current.type);\n        }\n\n        Assert.ok(joischema, 'Could not resolve type: ' + current.type + '.');\n\n        Object.keys(typeDefinitionMap).forEach(function (key) {\n            if (current[key]) {\n                joischema = joischema[typeDefinitionMap[key]](current[key]);\n            }\n        });\n\n        return joischema;\n    }\n\n    function resolveAnyOf(current) {\n        Assert.ok(Thing.isArray(current.anyOf), 'Expected anyOf to be an array.');\n\n        return Joi.alternatives().try(current.anyOf.map(function (schema) {\n            return resolve(schema);\n        }));\n    }\n\n    function resolveAllOf(current) {\n        Assert.ok(Thing.isArray(current.allOf), 'Expected allOf to be an array.');\n\n        return new All().try(current.allOf.map(function (schema) {\n            return resolve(schema);\n        }));\n    }\n\n    function resolveOneOf(current) {\n        Assert.ok(Thing.isArray(current.oneOf), 'Expected allOf to be an array.');\n\n        return Joi.alternatives().try(current.oneOf.map(function (schema) {\n            return resolve(schema);\n        })).required();\n    }\n\n    function resolveproperties(current) {\n        const schemas = {};\n\n        if (!Thing.isObject(current.properties)) {\n            return;\n        }\n\n        Object.keys(current.properties).forEach(function (key) {\n            const property = current.properties[key];\n\n            let joischema = resolve(property);\n\n            if (current.required && !!~current.required.indexOf(key)) {\n                joischema = joischema.required();\n            }\n\n            schemas[key] = joischema;\n        });\n\n        return schemas;\n    }\n\n    function object(current) {\n        let joischema = Joi.object(resolveproperties(current));\n\n        if (current.additionalProperties === true) {\n            joischema = joischema.unknown(true);\n        }\n\n        if (Thing.isObject(current.additionalProperties)) {\n            joischema = joischema.keys(resolveproperties({properties: current.additionalProperties}));\n        }\n\n        if (current.additionalProperties) {\n            joischema = joischema.unknown(true);\n        }\n\n        Thing.isNumber(current.minProperties) && (joischema = joischema.min(current.minProperties));\n        Thing.isNumber(current.maxProperties) && (joischema = joischema.max(current.maxProperties));\n\n        return joischema;\n    }\n\n    function array(current) {\n        let joischema = Joi.array();\n\n        joischema = joischema.items(resolve(current.items));\n\n        Thing.isNumber(current.minItems) && (joischema = joischema.min(current.minItems));\n        Thing.isNumber(current.maxItems) && (joischema = joischema.max(current.maxItems));\n\n        if (current.uniqueItems) {\n            joischema = joischema.unique();\n        }\n\n        return joischema;\n    }\n\n    function number(current) {\n        let joischema = Joi.number();\n\n        if (current.type === 'integer') {\n            joischema = joischema.integer();\n        }\n\n        Thing.isNumber(current.minimum) && (joischema = joischema.min(current.minimum));\n        Thing.isNumber(current.maximum) && (joischema = joischema.max(current.maximum));\n\n        return joischema;\n    }\n\n    function string(current) {\n        let joischema = Joi.string();\n\n        if (current.enum) {\n            return Joi.any().valid(current.enum);\n        }\n\n        switch (current.format) {\n            case 'date':\n            case 'date-time':\n                joischema = date(current);\n                break;\n            case 'email':\n                joischema = email(current);\n                break;\n            case 'hostname':\n                joischema = Joi.string().hostname();\n                break;\n            case 'ipv4':\n                joischema = Joi.string().ip(['ipv4']);\n                break;\n            case 'ipv6':\n                joischema = Joi.string().ip(['ipv6']);\n                break;\n            case 'uri':\n                joischema = Joi.string().uri();\n                break;\n            default:\n                joischema = regularString(current);\n                break;\n        }\n        return joischema;\n    }\n\n    function regularString(current) {\n        let joischema = Joi.string();\n\n        current.pattern && (joischema = joischema.regex(new RegExp(current.pattern)));\n\n        if (Thing.isUndefined(current.minLength)) {\n            current.minLength = 0;\n        }\n\n        if (Thing.isNumber(current.minLength)) {\n            if (current.minLength === 0) {\n                joischema = joischema.allow('');\n            }\n            joischema = joischema.min(current.minLength);\n        }\n\n        Thing.isNumber(current.maxLength) && (joischema = joischema.max(current.maxLength));\n        return joischema;\n    }\n\n    function email(current) {\n        let joischema = Joi.string().email();\n        Thing.isNumber(current.maxLength) && (joischema = joischema.max(current.maxLength));\n        return joischema;\n    }\n\n    function date(current) {\n        let joischema = Joi.date();\n        current.min && (joischema = joischema.min(current.min));\n        current.max && (joischema = joischema.max(current.max));\n        return joischema;\n    }\n\n    return resolve(schema);\n};\n\nclass All extends Alternatives {\n    constructor() {\n        super();\n        this._type = 'all';\n        this._invalids.remove(null);\n        this._inner.matches = [];\n    }\n    _base(value, state, options) {\n        let errors = [];\n        const results = [];\n\n        if (!options) {\n            options = {};\n        }\n\n        options.stripUnknown = true;\n\n        for (let i = 0, il = this._inner.matches.length; i < il; ++i) {\n            const item = this._inner.matches[i];\n            let schema = item.schema;\n            if (!schema) {\n                const failed = item.is._validate(item.ref(state.parent, options), null, options, state.parent).errors;\n                schema = failed ? item.otherwise : item.then;\n                if (!schema) {\n                    continue;\n                }\n            }\n\n            const result = schema._validate(value, state, options);\n\n            if (!result.errors) {\n                results.push(result.value);\n            }\n            else {\n                errors = errors.concat(result.errors);\n            }\n        }\n\n        return { value: value, errors: errors };\n    }\n}\n"}